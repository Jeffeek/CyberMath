<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CyberMath.Extensions</name>
    </assembly>
    <members>
        <member name="T:CyberMath.Extensions.CollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps items in indexed collections
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="collection">Collection</param>
            <param name="firstIndex">First index for swapping
            <remarks><param name="firstIndex">&gt;0</param></remarks></param>
            <param name="secondIndex">Second index for swapping
            <remarks><param name="secondIndex">&gt;0</param></remarks></param>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the items in an indexed collection
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="collection">The collection to shuffle</param>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Permute <see cref="T:System.Collections.Generic.IEnumerable`1"> collection with all elements without repeating elements</see>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="list">List of elements</param>
            <param name="length">Max length for algorithm</param>
            <returns>New <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with permutations</returns>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.IEnumerable`1"> collections with all permutations of elements without repeating elements</see>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="collection">List of elements</param>
            <returns>New <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with permutations without repeating</returns>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.PermutationsWithRepeat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.IEnumerable`1"> collections with all permutations of elements with repeating elements</see>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="collection">List of elements</param>
            <returns>New <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with permutations with repeating</returns>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.RandomItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a random item from <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="collection">The collection to enumerate</param>
            <returns>Random item from enumerable collection</returns>
        </member>
        <member name="T:CyberMath.Extensions.RandomExtensions">
            <summary>
            Extension methods for <see cref="T:System.Random"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Generates a <see cref="T:System.Double"/> number between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="random">Random instance</param>
            <param name="min">Minimal value to generate</param>
            <param name="max">Maximal value to generate</param>
            <returns><see cref="T:System.Double"/> value between <paramref name="min"/> and <paramref name="max"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.RandomExtensions.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Generates a <see cref="T:System.Int64"/> number between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="random">Random instance</param>
            <param name="min">Minimal value to generate</param>
            <param name="max">Maximal value to generate</param>
            <returns><see cref="T:System.Int64"/> value between <paramref name="min"/> and <paramref name="max"/></returns>
        </member>
        <member name="T:CyberMath.Extensions.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.IsPalindrome(System.String)">
            <summary>
            Checks <paramref name="input"/> for palindromicity
            </summary>
            <param name="input">Input string</param>
            <returns><see cref="T:System.Boolean"/> true if <paramref name="input"/> is palindrome</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.IsAnagram(System.String,System.String)">
            <summary>
            Checks two string for anagramism
            </summary>
            <param name="inputOriginal">First string to check</param>
            <param name="testInput">Second string to check</param>
            <returns><see cref="T:System.Boolean"/>: true if two string are anagrams of each other</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.CalculateFrequency(System.String)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> where <paramref name="TKey"/> is <see cref="T:System.Char"/> and <paramref name="TValue"/> is <see cref="T:System.Int32"/> (count of <paramref name="TKey"/> in input string)
            </summary>
            <param name="input"></param>
            <returns>New <see cref="T:System.Collections.Generic.Dictionary`2"/> where Key is char in input string and Value is count of this char</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.Concat(System.String,System.Int32,System.Boolean)">
            <summary>
            Concatenates a string the <paramref name="count"/> of times and can append line if <paramref name="appendLine"/> is true
            </summary>
            <param name="input">Input string</param>
            <param name="count">Count of repeating</param>
            <param name="appendLine">Setting for appending.</param>
            <returns>New concated string <paramref name="count"/> times</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.Concat(System.String,System.Int32,System.String)">
            <summary>
            Concatenates a string the <paramref name="count"/> of times, separated by a <paramref name="separator"/>
            </summary>
            <param name="input">Input string</param>
            <param name="count">Count of repeating</param>
            <param name="separator">Separator between strings</param>
            <returns>New concated string <paramref name="count"/> times with <paramref name="separator"/> between</returns>
        </member>
    </members>
</doc>
