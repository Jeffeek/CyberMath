<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CyberMath.Structures.BinaryTreeBase</name>
    </assembly>
    <members>
        <member name="T:CyberMath.Structures.BinaryTreeBase.BinaryTreeBase`1">
            <summary>
            Implementing of native <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <typeparam name="T"><see cref="T:System.IComparable`1"/></typeparam>
        </member>
        <member name="T:CyberMath.Structures.BinaryTreeBase.BinaryTreeNodeBase`1">
            <summary>
            Implementing of native <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <typeparam name="T"><see cref="T:System.IComparable`1"/></typeparam>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.BinaryTreeNodeBase`1.FindNode(CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode{`0},`0)">
            <summary>
            Finds node by <paramref name="value"/>
            </summary>
            <param name="subTree">A <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/> subTree where to find</param>
            <param name="value">Value to find</param>
            <returns>Reference to the node with <paramref name="value"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.BinaryTreeNodeBase`1.GetSuccessor(CyberMath.Structures.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
            Finds the successor of <paramref name="node"/>
            </summary>
            <param name="node"><see cref="T:CyberMath.Structures.BinaryTreeBase.BinaryTreeNodeBase`1"/> node from to find</param>
            <returns>Reference to the successor</returns>
        </member>
        <member name="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1">
            <summary>
            Interface for Binary Tree
            </summary>
            <typeparam name="T"><see cref="T:System.IComparable`1"/></typeparam>
        </member>
        <member name="P:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.Root">
            <summary>
            Reference to the main node, called Root
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.IsEmpty">
            <summary>
            <see cref="T:System.Boolean"/> result which show the emptiness of <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.Depth">
            <summary>
            Depth of <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <returns><see cref="T:System.Int32"/> result of deepness in <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.Inorder">
            <summary>
            Returns an inorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <returns>Inorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.Preorder">
            <summary>
            Returns an preorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <returns>Preorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.Postorder">
            <summary>
            Returns an postorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <returns>Postorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.Max">
            <summary>
            Returns maximal element in <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.Min">
            <summary>
            Returns minimal element in <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection into <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1.MergeWith(CyberMath.Structures.BinaryTreeBase.IBinaryTree{`0})">
            <summary>
            Merges initial <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/> with another <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <param name="binaryTree"></param>
        </member>
        <member name="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1">
            <summary>
            Represents interface for Node for <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <typeparam name="T"><see cref="T:System.IComparable`1"/></typeparam>
        </member>
        <member name="P:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Left">
            <summary>
            Reference to the left-child node
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Right">
            <summary>
            Reference to the right-child node
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Data">
            <summary>
            Data in node
            </summary>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Depth">
            <summary>
            Finds depth of the DEEPEST child in initial <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <returns>Depth of <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Insert(`0)">
            <summary>
            Inserting data into initial <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <param name="value"></param>
            <returns>Reference to the root</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Remove(`0)">
            <summary>
            Removing data from initial <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <param name="value"></param>
            <returns>Reference to the root</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Min">
            <summary>
            Find the minimal <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/> in initial <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <returns>Reference to the minimal element</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1.Max">
            <summary>
            Find the maximal <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/> in initial <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <returns>Reference to the maximal element</returns>
        </member>
        <member name="T:CyberMath.Structures.BinaryTreeBase.TraversalOrderType">
            <summary>
            Enum to represent traversal strategy in <see cref="T:CyberMath.Structures.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
        </member>
    </members>
</doc>
