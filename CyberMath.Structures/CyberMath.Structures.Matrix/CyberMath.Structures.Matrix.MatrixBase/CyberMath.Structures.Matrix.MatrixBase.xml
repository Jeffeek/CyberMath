<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CyberMath.Structures.Matrix.MatrixBase</name>
    </assembly>
    <members>
        <member name="T:CyberMath.Structures.MatrixBase.Exceptions.MatrixIncomparableOperationException">
            <summary>
            Exception accures when happens an Incomparable operation with <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/>
            </summary>
        </member>
        <member name="T:CyberMath.Structures.MatrixBase.IMatrixBase`1">
            <summary>
            Represent the base interface for matrixes
            </summary>
            <typeparam name="T">ANY</typeparam>
        </member>
        <member name="P:CyberMath.Structures.MatrixBase.IMatrixBase`1.RowsCount">
            <summary>
            Count of rows in matrix
            </summary>
        </member>
        <member name="P:CyberMath.Structures.MatrixBase.IMatrixBase`1.IsSquare">
            <summary>
            Represent <see cref="T:System.Boolean"/> value if the rows count equals elements count on each row
            </summary>
        </member>
        <member name="P:CyberMath.Structures.MatrixBase.IMatrixBase`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for every element in <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/> 
            </summary>
            <param name="row">Row index</param>
            <param name="column">Column index</param>
            <returns>Element at [<paramref name="row"/>, <paramref name="column"/>]</returns>
        </member>
        <member name="M:CyberMath.Structures.MatrixBase.IMatrixBase`1.ProcessFunctionOverData(System.Action{System.Int32,System.Int32})">
            <summary>
            Do action over every element in matrix
            </summary>
            <param name="func">Function to do</param>
        </member>
        <member name="M:CyberMath.Structures.MatrixBase.IMatrixBase`1.ElementsInRow(System.Int32)">
            <summary>
            Returns count of elements in row
            </summary>
            <param name="rowIndex">Row index</param>
            <returns>Count of elements in row</returns>
        </member>
        <member name="M:CyberMath.Structures.MatrixBase.IMatrixBase`1.CreateMatrixWithoutColumn(System.Int32)">
            <summary>
            Creates a new <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/> matrix without column at <paramref name="columnIndex"/>
            </summary>
            <param name="columnIndex">Column index to remove</param>
            <returns>A new <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/> matrix without column at <paramref name="columnIndex"/></returns>
        </member>
        <member name="M:CyberMath.Structures.MatrixBase.IMatrixBase`1.CreateMatrixWithoutRow(System.Int32)">
            <summary>
            Creates a new <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/> matrix without row at <paramref name="rowIndex"/>
            </summary>
            <param name="columnIndex">Column index to remove</param>
            <returns>A new <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/> matrix without row at <paramref name="rowIndex"/></returns>
        </member>
        <member name="T:CyberMath.Structures.MatrixBase.MatrixBaseExtensions">
            <summary>
            Extension methods for <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.MatrixBase.MatrixBaseExtensions.IsMaxInColumn``1(CyberMath.Structures.MatrixBase.IMatrixBase{``0},System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is max in <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/> matrix column at index <paramref name="j"/>
            </summary>
            <typeparam name="T">IComparable type</typeparam>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.MatrixBase.MatrixBaseExtensions.IsMinInRow``1(CyberMath.Structures.MatrixBase.IMatrixBase{``0},System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is min in <see cref="T:CyberMath.Structures.MatrixBase.IMatrixBase`1"/> matrix row at index <paramref name="i"/>
            </summary>
            <typeparam name="T">IComparable type</typeparam>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
    </members>
</doc>
