<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CyberMath</name>
    </assembly>
    <members>
        <member name="T:CyberMath.Extensions.CollectionExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps items in indexed collections
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="source">Collection</param>
            <param name="firstIndex">First index for swapping</param>
            <param name="secondIndex">Second index for swapping</param>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
                Shuffles the items in an indexed collection
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="source">The collection to shuffle</param>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Permute <see cref="T:System.Collections.Generic.IEnumerable`1"> collection with all elements without repeating elements</see>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="source">List of elements</param>
            <param name="length">Max length for algorithm</param>
            <returns>New <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with permutations</returns>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns a new
                <see cref="T:System.Collections.Generic.IEnumerable`1"> collections with all permutations of elements without repeating elements</see>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="source">List of elements</param>
            <returns>New <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with permutations without repeating</returns>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.PermutationsWithRepeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a new
                <see cref="T:System.Collections.Generic.IEnumerable`1"> collections with all permutations of elements with repeating elements</see>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="source">List of elements</param>
            ///
            <param name="length">Initial length</param>
            <returns>New <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with permutations with repeating</returns>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.PermutationsWithRepeat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns a new
                <see cref="T:System.Collections.Generic.IEnumerable`1"> collections with all permutations of elements with repeating elements</see>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="source">List of elements</param>
            <returns>New <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection with permutations with repeating</returns>
        </member>
        <member name="M:CyberMath.Extensions.CollectionExtensions.RandomItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets a random item from <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="source">The collection to enumerate</param>
            <returns>Random item from enumerable collection</returns>
        </member>
        <member name="T:CyberMath.Extensions.Int32.Int32Extension">
            <summary>
                Extension methods for <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.IsOdd(System.Int32)">
            <summary>
                Checks is number odd
            </summary>
            <param name="number">number to check</param>
            <returns><see langword="true"/> if number is odd; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.IsEven(System.Int32)">
            <summary>
                Checks is number even
            </summary>
            <returns><see langword="true"/> if number is even; otherwise <see langword="false"/></returns>
            <returns>is number even</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.GCD(System.Int32,System.Int32)">
            <summary>
                Calculates greatest common divisor between two <see cref="T:System.Int32"/> numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Greatest common divisor</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.LCM(System.Int32,System.Int32)">
            <summary>
                Calculates lowest common multiple between two <see cref="T:System.Int32"/> numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Lowest common multiple</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.Swap(System.Int32@,System.Int32@)">
            <summary>
                Swaps two integers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.IsPalindrome(System.Int32)">
            <summary>
                Checks <see cref="T:System.Int32"/> for palindromicity
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.GetLength(System.Int32)">
            <summary>
                Calculates the length of <see cref="T:System.Int32"/> number
            </summary>
            <param name="number"></param>
            <returns>Length of <paramref name="number"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.ToBinary(System.Int32)">
            <summary>
                Converts <see cref="T:System.Int32"/> <paramref name="number"/> to binary(2) format
            </summary>
            <param name="number">number to convert</param>
            <returns><see cref="T:System.String"/> representation of the binary form of a <paramref name="number"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.ToHex(System.Int32)">
            <summary>
                Converts <see cref="N:CyberMath.Extensions.Int32"/> <paramref name="number"/> to HEX(16) format
            </summary>
            <param name="number">number to convert</param>
            <returns><see cref="T:System.String"/> representation of the HEX form of a <paramref name="number"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32Extension.GetDigits(System.Int32)">
            <summary>
                Return a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of all digits of <paramref name="number"/>
            </summary>
            <param name="number">Number to parse</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of digits</returns>
        </member>
        <member name="T:CyberMath.Extensions.Int32.Int32PrimeNumbers">
            <summary>
                Extension methods of prime numbers for <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32PrimeNumbers.IsPrime(System.Int32)">
            <summary>
                Checks <paramref name="number"/> for primality
            </summary>
            <param name="number"></param>
            <returns><see langword="true"/> if <paramref name="number"/> is prime; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32PrimeNumbers.GenerateRandomPrimeNumber(System.Int32,System.Int32)">
            <summary>
                Generating one random prime number between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Prime number</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32PrimeNumbers.GeneratePrimeNumbers(System.Int32)">
            <summary>
                Generates <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of prime numbers which are less than <paramref name="max"/>
            </summary>
            <param name="max"></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of prime numbers between 2 and <paramref name="max"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int32.Int32PrimeNumbers.GeneratePrimeNumbers">
            <summary>
                Generator of prime numbers until <seealso cref="F:System.Int32.MaxValue"/>
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </returns>
        </member>
        <member name="T:CyberMath.Extensions.Int64.Int64Extension">
            <summary>
                Extension methods for <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.IsOdd(System.Int64)">
            <summary>
                Checks is number odd
            </summary>
            <param name="number">number to check</param>
            <returns><see langword="true"/> if number is odd; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.IsEven(System.Int64)">
            <summary>
                Checks is number even
            </summary>
            <returns><see langword="true"/> if number is even; otherwise <see langword="false"/></returns>
            <returns>is number even</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.GCD(System.Int64,System.Int64)">
            <summary>
                Calculates greatest common divisor between two <see cref="T:System.Int64"/> numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Greatest common divisor</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.LCM(System.Int64,System.Int64)">
            <summary>
                Calculates lowest common multiple between two <see cref="T:System.Int64"/> numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Lowest common multiple</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.Swap(System.Int64@,System.Int64@)">
            <summary>
                Swaps two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.IsPalindrome(System.Int64)">
            <summary>
                Checks <see cref="T:System.Int64"/> for palindromicity
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.GetLength(System.Int64)">
            <summary>
                Calculates the length of <see cref="T:System.Int64"/> number
            </summary>
            <param name="number"></param>
            <returns>Length of <paramref name="number"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.ToBinary(System.Int64)">
            <summary>
                Converts <see cref="T:System.Int64"/> <paramref name="number"/> to binary(2) format
            </summary>
            <param name="number">number to convert</param>
            <returns><see cref="T:System.String"/> representation of the binary form of a <paramref name="number"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.ToHex(System.Int64)">
            <summary>
                Converts <see cref="N:CyberMath.Extensions.Int64"/> <paramref name="number"/> to HEX(16) format
            </summary>
            <param name="number">number to convert</param>
            <returns><see cref="T:System.String"/> representation of the HEX form of a <paramref name="number"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64Extension.GetDigits(System.Int64)">
            <summary>
                Return a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of all digits of <paramref name="number"/>
            </summary>
            <param name="number">Number to parse</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of digits</returns>
        </member>
        <member name="T:CyberMath.Extensions.Int64.Int64PrimeNumbers">
            <summary>
                Extension methods of prime numbers for <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64PrimeNumbers.IsPrime(System.Int64)">
            <summary>
                Checks <paramref name="number"/> for primality
            </summary>
            <param name="number"></param>
            <returns><see langword="true"/> if <paramref name="number"/> is prime; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64PrimeNumbers.GenerateRandomPrimeNumber(System.Int64,System.Int64)">
            <summary>
                Generating one random prime number between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Prime number</returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64PrimeNumbers.GeneratePrimeNumbers(System.Int64)">
            <summary>
                Generates <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of prime numbers which are less than <paramref name="max"/>
            </summary>
            <param name="max"></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of prime numbers between 2 and <paramref name="max"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.Int64.Int64PrimeNumbers.GeneratePrimeNumbers">
            <summary>
                Generator of prime numbers until <seealso cref="F:System.Int64.MaxValue"/>
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </returns>
        </member>
        <member name="T:CyberMath.Extensions.RandomExtensions">
            <summary>
                Extension methods for <see cref="T:System.Random"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
                Generates a <see cref="T:System.Double"/> number between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="random">Random instance</param>
            <param name="min">Minimal value to generate</param>
            <param name="max">Maximal value to generate</param>
            <returns><see cref="T:System.Double"/> value between <paramref name="min"/> and <paramref name="max"/></returns>
        </member>
        <member name="M:CyberMath.Extensions.RandomExtensions.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
                Generates a <see cref="T:System.Int64"/> number between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="random">Random instance</param>
            <param name="min">Minimal value to generate</param>
            <param name="max">Maximal value to generate</param>
            <returns><see cref="T:System.Int64"/> value between <paramref name="min"/> and <paramref name="max"/></returns>
        </member>
        <member name="T:CyberMath.Extensions.StringExtensions">
            <summary>
                Extension methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.IsPalindrome(System.String)">
            <summary>
                Checks <paramref name="input"/> for palindromicity
            </summary>
            <param name="input">Input string</param>
            <returns><see cref="T:System.Boolean"/> true if <paramref name="input"/> is palindrome</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.IsAnagramOf(System.String,System.String)">
            <summary>
                Checks two string for anagramism
            </summary>
            <param name="inputOriginal">First string to check</param>
            <param name="testInput">Second string to check</param>
            <returns><see cref="T:System.Boolean"/>: true if two string are anagrams of each other</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.WordsFrequency(System.String)">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> where <see langword="TKey"/> is <see cref="T:System.Char"/> and
                <see langword="TValue"/> is <see cref="T:System.Int32"/> (count of <see langword="TKey"/> in input string)
            </summary>
            <param name="input"></param>
            <returns>New <see cref="T:System.Collections.Generic.Dictionary`2"/> where Key is char in input string and Value is count of this char</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.Concat(System.String,System.Int32,System.Boolean)">
            <summary>
                Concatenates a string the <paramref name="count"/> of times and can append line if <paramref name="appendLine"/>
                is true
            </summary>
            <param name="input">Input string</param>
            <param name="count">Count of repeating</param>
            <param name="appendLine">Setting for appending.</param>
            <returns>New concated string <paramref name="count"/> times</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.Concat(System.String,System.Int32,System.String)">
            <summary>
                Concatenates a string the <paramref name="count"/> of times, separated by a <paramref name="separator"/>
            </summary>
            <param name="input">Input string</param>
            <param name="count">Count of repeating</param>
            <param name="separator">Separator between strings</param>
            <returns>New concated string <paramref name="count"/> times with <paramref name="separator"/> between</returns>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.ToInt32(System.String)">
            <summary>
                Returns <paramref name="input"/> <seealso cref="T:System.String"/> converted to <see cref="T:System.Int32"/>
            </summary>
            <param name="input">Input string, which is number</param>
            <returns><see cref="T:System.Int32"/> result number</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="input"/> represents not <see cref="N:CyberMath.Extensions.Int32"/></exception>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.ToInt64(System.String)">
            <summary>
                Returns <paramref name="input"/> <seealso cref="T:System.String"/> converted to <see cref="T:System.Int64"/>
            </summary>
            <param name="input">Input string, which is number</param>
            <returns><see cref="T:System.Int64"/> result number</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="input"/> represents not <see cref="N:CyberMath.Extensions.Int64"/></exception>
        </member>
        <member name="M:CyberMath.Extensions.StringExtensions.ToAlternatingCase(System.String)">
            <summary>
                Converts <paramref name="input"/> string to alternating case
                <br/>
                <c>
                    <example>
                        <paramref name="input"/> = kEk<br/>
                        output = KeK
                    </example>
                </c>
            </summary>
            <param name="input">Input string to convert</param>
            <returns>New alternating string of <paramref name="input"/></returns>
        </member>
        <member name="T:CyberMath.Helpers.FixExpressionConverter">
            <summary>
                Class for converting xFix <see langword="expression"/> into yFix: <br/>
                <example>
                    <see langword="Infix -> Postfix"/> => <see langword="A+B*C/(E-F) -> ABC*EF-/+"/><br/>
                    <see langword="Infix -> Prefix"/> => <see langword="A+B*C/(E-F) -> +A*B/C-EF"/><br/>
                    <see langword="Postfix -> Infix"/> => <see langword="ABC*EF-/+ -> (A+((B*C)/(E-F)))"/><br/>
                    <see langword="Postfix -> Prefix"/> => <see langword="ABC/-AK/L-* -> *-A/BC-/AKL"/><br/>
                    <see langword="Prefix -> Infix"/> => <see langword="+A*B/C-EF -> (A+(B*(C/(E-F))))"/><br/>
                    <see langword="Prefix -> Postfix"/> => <see langword="*-A/BC-/AKL -> ABC/-AK/L-*"/>
                </example>
            </summary>
        </member>
        <member name="M:CyberMath.Helpers.FixExpressionConverter.InfixToPostfix(System.String)">
            <summary>
                Converts an <see langword="INFIX"/> <paramref name="expression"/> into <see langword="POSTFIX"/>
            </summary>
            <param name="expression">Expression to convert</param>
            <returns>Converted <see langword="POSTFIX"/> expression from <paramref name="expression"/></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="expression"/> is null</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="expression"/> is not right</exception>
        </member>
        <member name="M:CyberMath.Helpers.FixExpressionConverter.InfixToPrefix(System.String)">
            <summary>
                Converts an <see langword="INFIX"/> <paramref name="expression"/> into <see langword="PREFIX"/>
            </summary>
            <param name="expression">Expression to convert</param>
            <returns>Converted <see langword="PREFIX"/> expression from <paramref name="expression"/></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="expression"/> is null</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="expression"/> is not right</exception>
        </member>
        <member name="M:CyberMath.Helpers.FixExpressionConverter.PostfixToInfix(System.String)">
            <summary>
                Converts an <see langword="POSTFIX"/> <paramref name="expression"/> into <see langword="INFIX"/>
            </summary>
            <param name="expression">Expression to convert</param>
            <returns>Converted <see langword="INFIX"/> expression from <paramref name="expression"/></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="expression"/> is null</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="expression"/> is not right</exception>
        </member>
        <member name="M:CyberMath.Helpers.FixExpressionConverter.PrefixToInfix(System.String)">
            <summary>
                Converts an <see langword="PREFIX"/> <paramref name="expression"/> into <see langword="INFIX"/>
            </summary>
            <param name="expression">Expression to convert</param>
            <returns>Converted <see langword="INFIX"/> expression from <paramref name="expression"/></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="expression"/> is null</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="expression"/> is not right</exception>
        </member>
        <member name="M:CyberMath.Helpers.FixExpressionConverter.PostfixToPrefix(System.String)">
            <summary>
                Converts an <see langword="POSTFIX"/> <paramref name="expression"/> into <see langword="PREFIX"/>
            </summary>
            <param name="expression">Expression to convert</param>
            <returns>Converted <see langword="PREFIX"/> expression from <paramref name="expression"/></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="expression"/> is null</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="expression"/> is not right</exception>
        </member>
        <member name="M:CyberMath.Helpers.FixExpressionConverter.PrefixToPostfix(System.String)">
            <summary>
                Converts an <see langword="PREFIX"/> <paramref name="expression"/> into <see langword="POSTFIX"/>
            </summary>
            <param name="expression">Expression to convert</param>
            <returns>Converted <see langword="POSTFIX"/> expression from <paramref name="expression"/></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="expression"/> is null</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="expression"/> is not right</exception>
        </member>
        <member name="T:CyberMath.Helpers.GenericTypesExtensions">
            <summary>
                Just a class to make out life and programing faster and more productive
            </summary>
        </member>
        <member name="M:CyberMath.Helpers.GenericTypesExtensions.SerializableDeepCopy``1(``0)">
            <summary>
                Makes a deep copy of <paramref name="item"/>.
                <c>Type of <paramref name="item"/> should be marked as [Serializable]; otherwise -> EXCEPTION</c>
            </summary>
            <param name="item">Object to copy</param>
            <typeparam name="T">[Serializable] and NOT null</typeparam>
            <returns>New copied object</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is null</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="item"/> is not [Serializable]</exception>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTree`1">
            <summary>
                Represents AVL Binary Tree. Implements <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTree`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTree`1.#ctor(`0[])">
            <summary>
                Creates an instance of <see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTree`1"/> and adds <paramref name="values"/>
            </summary>
            <param name="values">Values to add</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTree`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Creates an instance of <see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTree`1"/> and adds <paramref name="values"/>
            </summary>
            <param name="values">Values to add</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTree`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1">
            <summary>
                Represents an AVL Binary Tree NODE. Implements <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="F:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1._height">
            <summary>
                Height of initial <see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.#ctor(`0)">
            <summary>
                Creates instance of <see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1"/> with <paramref name="data"/>
            </summary>
            <param name="data">Data to initialize</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.Insert(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.RemoveMin(CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode{`0})">
            <summary>
                Removes a minimal node from <paramref name="subTree"/>
            </summary>
            <param name="subTree"><see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1"/> subtree where will be deleted minimal node</param>
            <returns>
                If <see cref="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Left"/> equals <see langword="null"/> returns reference to
                <see cref="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Right"/>. Else balanced <paramref name="subTree"/> after removing
            </returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.InternalInsert(CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode{`0},`0)">
            <summary>
                Removes node with value <paramref name="data"/>
            </summary>
            <param name="node">SubTree where to find and remove</param>
            <param name="data">Data to remove</param>
            <returns>Reference to root</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.GetHeight(CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode{`0})">
            <summary>
                Returns <see cref="F:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1._height"/> for <paramref name="node"/>
            </summary>
            <param name="node"></param>
            <returns>Height of <paramref name="node"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.BFactor">
            <summary>
                Calculates BFactor in initial <see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.FixHeight(CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode{`0})">
            <summary>
                Fixes <see cref="F:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1._height"/> after fixing <paramref name="node"/>
            </summary>
            <param name="node">Node to fix</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.RotateRight(CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode{`0})">
            <summary>
                Right rotating of <see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1"/>
            </summary>
            <param name="node">Node to rotate</param>
            <returns>Reference to the rotated node</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.RotateLeft(CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode{`0})">
            <summary>
                Left rotating of <see cref="T:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1"/>
            </summary>
            <param name="node">Node to rotate</param>
            <returns>Reference to the rotated node</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode`1.Balance(CyberMath.Structures.BinaryTrees.AVLBinaryTree.AVLBinaryTreeNode{`0})">
            <summary>
                Balancing <paramref name="node"/>
            </summary>
            <param name="node"></param>
            <returns>Reference to the <paramref name="node"/> after balancing</returns>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1">
            <summary>
                Implementing of native <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Creates an instance and adds <paramref name="values"/> to the tree
            </summary>
            <param name="values">values to add</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.#ctor">
            <summary>
                Creates a new instance with 0 elements
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Root">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.TraversalOrderType">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Depth">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.MergeWith(CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.InternalContains(CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode{`0},`0)">
            <summary>
                Internal method for searching a <paramref name="data"/> in subtree <paramref name="node"/>
            </summary>
            <param name="node">Subtree where to search</param>
            <param name="data">A value to search</param>
            <returns><see langword="true"/> if <paramref name="data"/> exists in subtree</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Inorder">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Preorder">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Postorder">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Max">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Min">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1">
            <summary>
                Implementing of native <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Left">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Right">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Data">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Insert(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Depth">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Min">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Max">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.InternalDepth(CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
                Internal method to find the deep of <paramref name="node"/>
            </summary>
            <param name="node">Node where to search</param>
            <returns>The deep of <paramref name="node"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.FindNode(CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode{`0},`0)">
            <summary>
                Finds node by <paramref name="value"/>
            </summary>
            <param name="subTree">A <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/> subTree where to find</param>
            <param name="value">Value to find</param>
            <returns>Reference to the node with <paramref name="value"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.GetSuccessor(CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
                Finds the successor of <paramref name="node"/>
            </summary>
            <param name="node"><see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1"/> node from to find</param>
            <returns>Reference to the successor</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Equals(CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
                Shows the equality of initial <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/> and <paramref name="other"/>
            </summary>
            <param name="other"></param>
            <returns>
                <see langword="true"/> if this node equals to <paramref name="other"/>; otherwise <see langword="false"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Equals(CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.#ctor">
            <summary>
                Empty constructor to create an empty <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.#ctor(`0)">
            <summary>
                Create an instance of <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/> with <paramref name="data"/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.CompareTo(CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.op_GreaterThan(CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0},CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
                Returns <see langword="true"/> if <paramref name="first"/> is greater than <paramref name="second"/>; otherwise
                <see langword="false"/>
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.op_LessThan(CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0},CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
                Returns <see langword="true"/> if <paramref name="second"/> is greater than <paramref name="first"/>; otherwise
                <see langword="false"/>
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.op_Equality(CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0},CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
                Returns <see langword="true"/> if <paramref name="first"/> is equal by <see cref="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Data"/> than
                <paramref name="second"/>; otherwise <see langword="false"/>
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.op_Inequality(CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0},CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase{`0})">
            <summary>
                Returns <see langword="true"/> if <paramref name="first"/> is not equal by <see cref="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1.Data"/> than
                <paramref name="second"/>; otherwise <see langword="false"/>
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1">
            <summary>
                Interface for Binary Tree
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.Root">
            <summary>
                Reference to the main node, called Root
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.IsEmpty">
            <summary>
                <see cref="T:System.Boolean"/> result which show the emptiness of <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.TraversalOrderType">
            <summary>
                Traversal strategy for <see langword="foreach"/> statement
            </summary>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.Depth">
            <summary>
                Depth of <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <returns><see cref="T:System.Int32"/> result of deepness in <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.Inorder">
            <summary>
                Returns an inorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <returns>Inorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.Preorder">
            <summary>
                Returns an preorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <returns>Preorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.Postorder">
            <summary>
                Returns an postorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection
            </summary>
            <returns>Postorder traversal <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.Max">
            <summary>
                Returns maximal element in <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.Min">
            <summary>
                Returns minimal element in <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Adds <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection into <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1.MergeWith(CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree{`0})">
            <summary>
                Merges initial <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/> with another <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <param name="binaryTree"></param>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1">
            <summary>
                Represents interface for Node for <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Left">
            <summary>
                Reference to the left-child node
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Right">
            <summary>
                Reference to the right-child node
            </summary>
        </member>
        <member name="P:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Data">
            <summary>
                Data in node
            </summary>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Depth">
            <summary>
                Finds depth of the DEEPEST child in initial <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <returns>Depth of <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Insert(`0)">
            <summary>
                Inserting data into initial <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <param name="value"></param>
            <returns>Reference to the root</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Remove(`0)">
            <summary>
                Removing data from initial <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <param name="value"></param>
            <returns>Reference to the root</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Min">
            <summary>
                Find the minimal <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/> in initial <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <returns>Reference to the minimal element</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1.Max">
            <summary>
                Find the maximal <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/> in initial <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTreeNode`1"/>
            </summary>
            <returns>Reference to the maximal element</returns>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.TraversalOrderType">
            <summary>
                Enum to represent traversal strategy in <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
        </member>
        <member name="F:CyberMath.Structures.BinaryTrees.BinaryTreeBase.TraversalOrderType.Preorder">
            <summary>
                Preorder way in <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
        </member>
        <member name="F:CyberMath.Structures.BinaryTrees.BinaryTreeBase.TraversalOrderType.Inorder">
            <summary>
                Inorder way in <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
        </member>
        <member name="F:CyberMath.Structures.BinaryTrees.BinaryTreeBase.TraversalOrderType.Postorder">
            <summary>
                Postorder way in <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.IBinaryTree`1"/>
            </summary>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTree`1">
            <summary>
                Represents vanilla Binary Tree. Implements <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTree`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTree`1.#ctor(`0[])">
            <summary>
                Creates an instance of <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTree`1"/> and adds <paramref name="values"/>
            </summary>
            <param name="values">Values to add</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTree`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Creates an instance of <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTree`1"/> and adds <paramref name="values"/>
            </summary>
            <param name="values">Values to add</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTree`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTreeNode`1">
            <summary>
                Represents a vanilla Binary Tree NODE. Implements <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTreeNode`1.#ctor(`0)">
            <summary>
                Creates instance of <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTreeNode`1"/> with <paramref name="data"/>
            </summary>
            <param name="data">Data to initialize</param>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTreeNode`1.Insert(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.BinaryTree.BinaryTreeNode`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.BinaryTreeColor">
            <summary>
                Enum for Red-Black Binary Tree NODE color
            </summary>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTree`1">
            <summary>
                Represents Red-Black Binary Tree. Implements <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeBase`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTree`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTree`1.#ctor(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTree`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTree`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1">
            <summary>
                Represents Red-Black Binary Tree NODE. Implement <see cref="T:CyberMath.Structures.BinaryTrees.BinaryTreeBase.BinaryTreeNodeBase`1"/>
            </summary>
            <typeparam name="T">
                <see cref="T:System.IComparable`1"/>
            </typeparam>
        </member>
        <member name="F:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1._color">
            <summary>
                Color of initial <see cref="T:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1"/>
            </summary>
        </member>
        <member name="F:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1._parent">
            <summary>
                Reference to the parent of the initial node
            </summary>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.#ctor(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.GetUncle(CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0})">
            <summary>
                Finds uncle of <paramref name="node"/>
            </summary>
            <param name="node"></param>
            <returns>Uncle of <paramref name="node"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.GetSibling(CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0})">
            <summary>
                Finds sibling of <paramref name="node"/>
            </summary>
            <param name="node"></param>
            <returns>Sibling of <paramref name="node"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.GetGrandparent(CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0})">
            <summary>
                Finds grandparent of <paramref name="node"/>
            </summary>
            <param name="node"></param>
            <returns>Grandparent of <paramref name="node"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.InsertFixUp(CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0},CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0})">
            <summary>
                Fix up after inserting
            </summary>
            <param name="root">Reference to root</param>
            <param name="nodeX">Reference to node which was inserted</param>
            <returns>Reference to root</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.DeleteFixUp(CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0},CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0})">
            <summary>
                Fix up after removing
            </summary>
            <param name="root">Reference to root</param>
            <param name="nodeX">Reference to node which helps to fix up</param>
            <returns>Reference to root</returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.Insert(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.RotateLeft(CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0},CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0})">
            <summary>
                Left rotate of <paramref name="node"/>
            </summary>
            <param name="root">Reference to root</param>
            <param name="node">Reference to node to rotate</param>
            <returns>Reference to <paramref name="root"/></returns>
        </member>
        <member name="M:CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode`1.RotateRight(CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0},CyberMath.Structures.BinaryTrees.RedBlackBinaryTree.RedBlackBinaryTreeNode{`0})">
            <summary>
                Right rotate of <paramref name="node"/>
            </summary>
            <param name="root">Reference to root</param>
            <param name="node">Reference to node to rotate</param>
            <returns>Reference to <paramref name="root"/></returns>
        </member>
        <member name="T:CyberMath.Structures.Equations.QuadraticEquation">
            <summary>
                Represents a class for building quadratic equation
                <para/>
                <example>1x^2+2.5x+7=0 || 1.5x^2+2x+7.1</example>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Equations.QuadraticEquation.#ctor(System.Double,System.Double,System.Double)">
            <summary>
                Creating a new instance of <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/> with 3 <seealso cref="T:System.Double"/> arguments:
                <paramref name="a"/>, <paramref name="b"/>, <paramref name="c"/>
            </summary>
            <param name="a">x^2</param>
            <param name="b">x</param>
            <param name="c"></param>
        </member>
        <member name="M:CyberMath.Structures.Equations.QuadraticEquation.#ctor(System.String)">
            <summary>
                Creating a new instance of <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/> and parse string for searching a quadratic equation in
                <paramref name="quadraticEquation"/>
            </summary>
            <param name="quadraticEquation">A string to parse</param>
        </member>
        <member name="P:CyberMath.Structures.Equations.QuadraticEquation.A">
            <summary>
                Represent a first argument in <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/>
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Equations.QuadraticEquation.B">
            <summary>
                Represent a second argument in <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/>
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Equations.QuadraticEquation.C">
            <summary>
                Represent a third argument in <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/>
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Equations.QuadraticEquation.Determinant">
            <summary>
                Determinant of current <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/>
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Equations.QuadraticEquation.FirstRoot">
            <summary>
                First calculated root of <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/>
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Equations.QuadraticEquation.SecondRoot">
            <summary>
                First calculated root of <see cref="T:CyberMath.Structures.Equations.QuadraticEquation"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Equations.QuadraticEquation.CalculateDeterminant">
            <summary>
                Calculates a <see cref="P:CyberMath.Structures.Equations.QuadraticEquation.Determinant"/> and then <see cref="P:CyberMath.Structures.Equations.QuadraticEquation.FirstRoot"/> &amp; <see cref="P:CyberMath.Structures.Equations.QuadraticEquation.SecondRoot"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Equations.QuadraticEquation.CalculateRoots">
            <summary>
                Calculates <see cref="P:CyberMath.Structures.Equations.QuadraticEquation.FirstRoot"/> and <see cref="P:CyberMath.Structures.Equations.QuadraticEquation.SecondRoot"/>
            </summary>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Base.Exceptions.MatrixInvalidOperationException">
            <summary>
                Exception appear when happens an invalid operation with <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.Exceptions.MatrixInvalidOperationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.Exceptions.MatrixInvalidOperationException.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Base.Exceptions.MatrixInvalidOperationException.Message">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1">
            <summary>
                Represent the base interface for matrices
            </summary>
            <typeparam name="T">ANY</typeparam>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Base.IMatrixBase`1.RowsCount">
            <summary>
                Count of rows in matrix
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Base.IMatrixBase`1.IsSquare">
            <summary>
                Represent <see cref="T:System.Boolean"/> value if the rows count equals elements count on each row
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Base.IMatrixBase`1.Item(System.Int32,System.Int32)">
            <summary>
                Indexer for every element in <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
            <param name="row">Row index</param>
            <param name="column">Column index</param>
            <returns>Element at [<paramref name="row"/>, <paramref name="column"/>]</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.IMatrixBase`1.ProcessFunctionOverData(System.Action{System.Int32,System.Int32})">
            <summary>
                Do action over every element in matrix
            </summary>
            <param name="func">Function to do</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.IMatrixBase`1.ElementsInRow(System.Int32)">
            <summary>
                Returns count of elements in row
            </summary>
            <param name="rowIndex">Row index</param>
            <returns>Count of elements in row</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.IMatrixBase`1.GetColumnsEnumerable">
            <summary>
                Returns enumerable, which is 'walks' on the column neither default <see cref="T:System.Collections.IEnumerator"/>
            </summary>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/> - columns of matrix</returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions">
            <summary>
                Extension methods for <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMaxInColumn``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is max in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix column at index <paramref name="j"/>
            </summary>
            <typeparam name="T">IComparable type</typeparam>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMinInRow``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is min in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix row at index <paramref name="i"/>
            </summary>
            <typeparam name="T">IComparable type</typeparam>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMaxInColumn(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int32}},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is max in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix column at index <paramref name="j"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMinInRow(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int32}},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is min in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix row at index <paramref name="i"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMaxInColumn(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int64}},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is max in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix column at index <paramref name="j"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMinInRow(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int64}},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is min in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix row at index <paramref name="i"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMaxInColumn(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Double}},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is max in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix column at index <paramref name="j"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.IsMinInRow(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Double}},System.Int32,System.Int32)">
            <summary>
                Returns <see cref="T:System.Boolean"/> value if element at [<paramref name="i"/>, <paramref name="j"/>] is min in
                <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/> matrix row at index <paramref name="i"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="i">Row index</param>
            <param name="j">Column index</param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})">
            <summary>
                <c>ONLY FOR SQUARE</c><br/>Calculates sum of all items in main diagonal in <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Sum in main diagonal</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int64})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Double})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Decimal})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int16})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})">
            <summary>
                Calculates sum of all items of side diagonal in <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Sum on side diagonal</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int64})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Double})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Decimal})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int16})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})">
            <summary>
                Calculates sum of all saddle points in matrix
            </summary>
            <param name="matrix"></param>
            <returns>Sum of all saddle points in matrix</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int64})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Double})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Decimal})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int16})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SumSaddlePoints(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int32}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int64}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Double}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Decimal}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int16}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.String})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int32}})">
            <summary>
                Calculates sum of all numbers of side diagonal in <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Sum in main diagonal</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int64}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Double}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Decimal}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Nullable{System.Int16}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Int32})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Int64})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Double})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Decimal})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Int16})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.DiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Int32})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Int64})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Double})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Decimal})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Int16})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum``1(CyberMath.Structures.Matrices.Base.IMatrixBase{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="matrix">
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </param>
            <param name="selector">Selector for sum</param>
            <returns>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Base.MatrixBaseExtensions.SideDiagonalSum(CyberMath.Structures.Matrices.Base.IMatrixBase{System.Int32})"/>
            </returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1">
            <summary>
                Represents an implementation of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1"/> -> <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.#ctor(System.Int32,System.Int32[])">
            <summary>
                Initializes a new matrix object with count of rows = <paramref name="rowsCount"/>
                and count of columns on each row => <paramref name="elementsAtRow"/>
            </summary>
            <param name="rowsCount"></param>
            <param name="elementsAtRow"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Initializes a new matrix object with count of rows = <paramref name="rowsCount"/>
                and count of columns on each row => <paramref name="elementsAtRow"/>
            </summary>
            <param name="rowsCount"></param>
            <param name="elementsAtRow"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.#ctor">
            <summary>
                Creates an instance of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1"/> with 0 rows and 0 columns
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.RowEnumerator(System.Int32)">
            <summary>
                Enumerates all elements in a row
            </summary>
            <param name="rowIndex">Row to enumerate</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> elements in a <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1"/> in
                <paramref name="rowIndex"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.GetColumnsEnumerable">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.RowsCount">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.IsSquare">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.ProcessFunctionOverData(System.Action{System.Int32,System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.ElementsInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.Clone">
            <summary>
                Returns a new cloned object of initial matrix.
                <remarks>
                    Works only with primitives and [Serializable] types
                </remarks>
            </summary>
            <returns>New matrix&lt;T&gt;</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.SortRows">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.SortRowsByDescending">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.AddColumn(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.InsertColumn(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.AddRow(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.InsertRow(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.RemoveColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.RemoveRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.Equals(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1">
            <summary>
                Represents an interface for dynamic jugged matrix
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1.AddColumn(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting a new column to the end of matrix; only if count of elements on each row is equal
            </summary>
            <param name="column">Column to push</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1.InsertColumn(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting the column into <paramref name="index"/> place in matrix, if it's possible
            </summary>
            <param name="index">Index to insert into</param>
            <param name="column">Column to insert</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1.AddRow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting a new row to the end of matrix
            </summary>
            <param name="row">Row to push</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1.InsertRow(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting the column into <paramref name="index"/> place in matrix
            </summary>
            <param name="index">Index to insert</param>
            <param name="row">Row to insert into</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1.RemoveColumn(System.Int32)">
            <summary>
                Removes a column at <paramref name="index"/> in matrix
            </summary>
            <param name="index">Index of deleting column</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.IDynamicJuggedMatrix`1.RemoveRow(System.Int32)">
            <summary>
                Removes a row at <paramref name="index"/> in matrix
            </summary>
            <param name="index">Index of deleting row</param>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1">
            <summary>
                Represents am implementation of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1"/> -> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.ProcessFunctionOverData(System.Action{System.Int32,System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.Transpose">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
                Init matrix with <paramref name="rowsCount"/> and <paramref name="columnsCount"/> and sets a default values
            </summary>
            <param name="rowsCount">Count of rows in initial matrix</param>
            <param name="columnsCount">Count of columns in initial matrix</param>
            <exception cref="T:System.ArgumentException">If <paramref name="rowsCount"/> or <paramref name="columnsCount"/> less than 0</exception>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.#ctor">
            <summary>
                Init matrix with 0 rows and 0 columns
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.ElementsInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.ColumnsCount">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.RowsCount">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.IsSquare">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.Clone">
            <summary>
                Returns a new cloned object of initial matrix.
                <remarks>
                    Works only with primitives and [Serializable] types
                </remarks>
            </summary>
            <returns>New matrix&lt;T&gt;</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.GetColumnsEnumerable">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.RowEnumerator(System.Int32)">
            <summary>
                Enumerates all elements in a row
            </summary>
            <param name="rowIndex">Row to enumerate</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> elements in a <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1"/> in <paramref name="rowIndex"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.AddColumn(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.AddRow(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.InsertColumn(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.InsertRow(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.RemoveColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.RemoveRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.Equals(CyberMath.Structures.Matrices.Matrix.IMatrix{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1">
            <summary>
                Represents an interface for dynamic matrices
            </summary>
            <typeparam name="T">ANY</typeparam>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1.AddColumn(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting a new column to the end of matrix
            </summary>
            <param name="column">Column to push</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1.InsertColumn(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting the column into <paramref name="index"/> place in matrix
            </summary>
            <param name="index">Index to insert into</param>
            <param name="column">Column to insert</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1.AddRow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting a new row to the end of matrix
            </summary>
            <param name="row">Row to push</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1.InsertRow(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserting the column into <paramref name="index"/> place in matrix
            </summary>
            <param name="index">Index to insert</param>
            <param name="row">Row to insert into</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1.RemoveColumn(System.Int32)">
            <summary>
                Removes a column at <paramref name="index"/> in matrix
            </summary>
            <param name="index">Index of deleting column</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.IDynamicMatrix`1.RemoveRow(System.Int32)">
            <summary>
                Removes a row at <paramref name="index"/> in matrix
            </summary>
            <param name="index">Index of deleting row</param>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Extensions.GenericJuggedMatrixExtensions">
            <summary>
                Extension methods only for <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.GenericJuggedMatrixExtensions.CreateMatrixWithoutRow``1(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{``0},System.Int32)">
            <summary>
                Creates a new <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> matrix without row at <paramref name="rowIndex"/>
            </summary>
            <param name="juggedMatrix"></param>
            <param name="rowIndex">Column index to remove</param>
            <returns>A new <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> matrix without row at <paramref name="rowIndex"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.GenericJuggedMatrixExtensions.CreateMatrixWithoutColumn``1(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{``0},System.Int32)">
            <summary>
                Creates a new <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> matrix without column at <paramref name="columnIndex"/>
            </summary>
            <param name="juggedMatrix"></param>
            <param name="columnIndex">Column index to remove</param>
            <returns>A new <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> matrix without column at <paramref name="columnIndex"/></returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Extensions.GenericMatrixExtensions">
            <summary>
                Extension methods only for <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.GenericMatrixExtensions.CreateMatrixWithoutColumn``1(CyberMath.Structures.Matrices.Matrix.IMatrix{``0},System.Int32)">
            <summary>
                Creates a new <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> matrix without column at <paramref name="columnIndex"/>
            </summary>
            <param name="matrix"></param>
            <param name="columnIndex">Column index to remove</param>
            <returns>A new <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> matrix without column at <paramref name="columnIndex"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.GenericMatrixExtensions.CreateMatrixWithoutRow``1(CyberMath.Structures.Matrices.Matrix.IMatrix{``0},System.Int32)">
            <summary>
                Creates a new <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> matrix without row at <paramref name="rowIndex"/>
            </summary>
            <param name="matrix"></param>
            <param name="rowIndex">Column index to remove</param>
            <returns>A new <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> matrix without row at <paramref name="rowIndex"/></returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Extensions.MatrixExtensions">
            <summary>
                Extension methods for <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> for their transformation
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.CountOnEachRow``1(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{``0})">
            <summary>
                Returns an array with count of elements on each row in <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToDynamicMatrix``1(CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix{``0})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1"/> from <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="juggedMatrix">Initial matrix</param>
            <returns>A new instance of <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToMatrix``1(CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix{``0})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Matrix.Matrix`1"/> from <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="juggedMatrix">Initial matrix</param>
            <returns>A new instance of <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToJuggedMatrix``1(CyberMath.Structures.Matrices.Matrix.IMatrix{``0})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/> from <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="matrix">Initial matrix</param>
            <returns>A new instance of <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToDynamicJuggedMatrix``1(CyberMath.Structures.Matrices.Matrix.IMatrix{``0})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1"/> from <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="matrix">Initial matrix</param>
            <returns>A new instance of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.CreateMatrix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Matrix.Matrix`1"/> which contains elements from <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.CreateDynamicMatrix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1"/> which contains elements from
                <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.CreateJuggedMatrix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/> which contains elements from <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.CreateDynamicJuggedMatrix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Creates a new instance of <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1"/> which contains elements from
                <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.CreateVanilla``1(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{``0})">
            <summary>
                Creates a vanilla array of arrays
                <see>
                    <cref>T</cref>
                </see>
                [][]
            </summary>
            <returns>Vanilla array of arrays which represents initial matrix</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.CreateVanilla``1(CyberMath.Structures.Matrices.Matrix.IMatrix{``0})">
            <summary>
                Creates a vanilla matrix
                <see>
                    <cref>T</cref>
                </see>
                [,]
            </summary>
            <returns>Vanilla matrix which represents initial matrix</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToMatrix``1(``0[0:,0:])">
            <summary>
                Converts a vanilla .NET matrix <see langword="T"/>[,] to <see cref="T:CyberMath.Structures.Matrices.Matrix.Matrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="matrix">Initial matrix to convert</param>
            <returns><see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>, made on base <paramref name="matrix"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToDynamicMatrix``1(``0[0:,0:])">
            <summary>
                Converts a vanilla .NET matrix <see langword="T"/>[,] to <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="matrix">Initial matrix to convert</param>
            <returns><see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Matrix.DynamicMatrix`1"/>, made on base <paramref name="matrix"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToJuggedMatrix``1(``0[][])">
            <summary>
                Converts a vanilla .NET matrix <see langword="T"/>[][] to <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="matrix">Initial matrix to convert</param>
            <returns><see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/>, made on base <paramref name="matrix"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.MatrixExtensions.ToDynamicJuggedMatrix``1(``0[][])">
            <summary>
                Converts a vanilla .NET matrix <see langword="T"/>[][] to <see cref="T:CyberMath.Structures.Matrices.Dynamic_Matrices.Dynamic_Jugged_Matrix.DynamicJuggedMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
            <param name="matrix">Initial matrix to convert</param>
            <returns><see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1"/>, made on base <paramref name="matrix"/></returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions">
            <summary>
                Extension methods for <see cref="T:System.ValueType"/> <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int32},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int32})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int32},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int32})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int32},System.Int32)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.FillRandomly(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int32},System.Int32,System.Int32)">
            <summary>
                Fills <paramref name="juggedMatrix"/> with randomly numbers
            </summary>
            <param name="juggedMatrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int64},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int64})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int64},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int64})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int64},System.Int64)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int64"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.FillRandomly(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Int64},System.Int64,System.Int64)">
            <summary>
                Fills <paramref name="juggedMatrix"/> with randomly numbers
            </summary>
            <param name="juggedMatrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Double},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Double})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Double},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Double})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Double},System.Double)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Double"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.FillRandomly(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Double},System.Double,System.Double)">
            <summary>
                Fills <paramref name="juggedMatrix"/> with randomly numbers
            </summary>
            <param name="juggedMatrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Decimal},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Decimal})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Decimal},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Decimal})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Decimal},System.Decimal)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Decimal"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.FillRandomly(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
                Fills <paramref name="juggedMatrix"/> with randomly numbers
            </summary>
            <param name="juggedMatrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.String},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.String})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.String},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.String})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.String},System.Int32)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int32}},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int32}})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int32}},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int32}})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int32}},System.Int32)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="juggedMatrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="juggedMatrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="juggedMatrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.FillRandomly(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int32}},System.Int32,System.Int32)">
            <summary>
                Fills <paramref name="juggedMatrix"/> with randomly numbers
            </summary>
            <param name="juggedMatrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int64}},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int64}})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int64}},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int64}})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int64}},System.Int64)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="juggedMatrix"/> on <see cref="T:System.Int64"/>
                <paramref name="number"/>
            </summary>
            <param name="juggedMatrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="juggedMatrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.FillRandomly(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Int64}},System.Int64,System.Int64)">
            <summary>
                Fills <paramref name="juggedMatrix"/> with randomly numbers
            </summary>
            <param name="juggedMatrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Add(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Double}},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Double}})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.Sub(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Double}},CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Double}})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="first"/> and
                <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.MulOnNumber(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Double}},System.Double)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> <paramref name="juggedMatrix"/> on
                <see cref="T:System.Double"/> <paramref name="number"/>
            </summary>
            <param name="juggedMatrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> - the result multiplication of matrix <paramref name="juggedMatrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeJuggedMatrixExtensions.FillRandomly(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{System.Nullable{System.Double}},System.Double,System.Double)">
            <summary>
                Fills <paramref name="juggedMatrix"/> with randomly numbers
            </summary>
            <param name="juggedMatrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension">
            <summary>
                Extension methods for ValueType for <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                Supported types: <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>,
                <see cref="T:System.String"/> and <see cref="T:System.Nullable`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Multiplication(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32})">
            <summary>
                Returns the multiplied <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> by <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result of multiplying <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Sub(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32},System.Int32)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateDeterminant(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32})">
            <summary>
                Calculates determinant for <see cref="T:System.Int32"/> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Determinant</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CreateInvertibleMatrix(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32})">
            <summary>
                Creates inverted matrix from <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <returns>New inverted <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateMinor(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32},System.Int32,System.Int32)">
            <summary>
                Calculates minor for <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns>Minor</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.FillRandomly(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32},System.Int32,System.Int32)">
            <summary>
                Fills <paramref name="matrix"/> with randomly numbers
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Multiplication(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64})">
            <summary>
                Returns the multiplied <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> by <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result of multiplying <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Sub(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64},System.Int64)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateDeterminant(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64})">
            <summary>
                Calculates determinant for <see cref="T:System.Int64"/> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Determinant</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CreateInvertibleMatrix(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64})">
            <summary>
                Creates inverted matrix from <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <returns>New inverted <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateMinor(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64},System.Int32,System.Int32)">
            <summary>
                Calculates minor for <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns>Minor</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.FillRandomly(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int64},System.Int64,System.Int64)">
            <summary>
                Fills <paramref name="matrix"/> with randomly numbers
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Multiplication(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double})">
            <summary>
                Returns the multiplied <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> by <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result of multiplying <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Sub(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double},System.Double)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateDeterminant(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double})">
            <summary>
                Calculates determinant for <see cref="T:System.Int64"/> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Determinant</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CreateInvertibleMatrix(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double})">
            <summary>
                Creates inverted matrix from <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <returns>New inverted <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateMinor(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double},System.Int32,System.Int32)">
            <summary>
                Calculates minor for <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns>Minor</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.FillRandomly(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Double},System.Double,System.Double)">
            <summary>
                Fills <paramref name="matrix"/> with randomly numbers
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Multiplication(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal})">
            <summary>
                Returns the multiplied <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> by <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result of multiplying <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Sub(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal},System.Decimal)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateDeterminant(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal})">
            <summary>
                Calculates determinant for <see cref="T:System.Decimal"/> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Determinant</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CreateInvertibleMatrix(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal})">
            <summary>
                Creates inverted matrix from <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <returns>New inverted <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateMinor(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal},System.Int32,System.Int32)">
            <summary>
                Calculates minor for <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns>Minor</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.FillRandomly(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
                Fills <paramref name="matrix"/> with randomly numbers
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximal value</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.String},CyberMath.Structures.Matrices.Matrix.IMatrix{System.String})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.String},System.Int32)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.FillRandomly(CyberMath.Structures.Matrices.Matrix.IMatrix{System.String},System.Guid,System.Int32)">
            <summary>
                Fills <paramref name="matrix"/> with randomly strings with <see cref="T:System.Guid"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <param name="guid">GUID object</param>
            <param name="length">Length of string</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Multiplication(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}})">
            <summary>
                Returns the multiplied <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> by <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result of multiplying <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Sub(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}},System.Int32)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateDeterminant(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}})">
            <summary>
                Calculates determinant for <seealso cref="T:System.Nullable`1"/> <see cref="T:System.Int32"/> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Determinant</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CreateInvertibleMatrix(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}})">
            <summary>
                Creates inverted matrix from <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <returns>New inverted <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateMinor(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int32}},System.Int32,System.Int32)">
            <summary>
                Calculates minor for <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns>Minor</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Multiplication(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}})">
            <summary>
                Returns the multiplied <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> by <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result of multiplying <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Sub(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}},System.Int64)">
            <summary>
                Returns the multiplication <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="matrix"/> on <see cref="T:System.Int32"/>
                <paramref name="number"/>
            </summary>
            <param name="matrix">First</param>
            <param name="number"></param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result multiplication of matrix <paramref name="matrix"/> on
                <paramref name="number"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateDeterminant(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}})">
            <summary>
                Calculates determinant for <seealso cref="T:System.Nullable`1"/> <see cref="T:System.Int64"/> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Determinant</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CreateInvertibleMatrix(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}})">
            <summary>
                Creates inverted matrix from <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <returns>New inverted <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateMinor(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Int64}},System.Int32,System.Int32)">
            <summary>
                Calculates minor for <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns>Minor</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Multiplication(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}})">
            <summary>
                Returns the multiplied <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> by <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result of multiplying <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Add(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}})">
            <summary>
                Returns the add <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result sum of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.Sub(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}},CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}})">
            <summary>
                Returns the subtraction <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> <paramref name="first"/> and <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
                <paramref name="second"/>
            </summary>
            <param name="first">First matrix</param>
            <param name="second">Second matrix</param>
            <returns>
                New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> - the result subtraction of matrices <paramref name="first"/> and
                <paramref name="second"/>
            </returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}},System.Double)">
            <summary>
                <inheritdoc cref="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.MulOnNumber(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Int32},System.Int32)"/>
            </summary>
            <param name="first"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateDeterminant(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}})">
            <summary>
                Calculates determinant for <seealso cref="T:System.Nullable`1"/> <see cref="T:System.Double"/> <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
            <param name="matrix">Initial matrix</param>
            <returns>Determinant</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CreateInvertibleMatrix(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}})">
            <summary>
                Creates inverted matrix from <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <returns>New inverted <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Extensions.ValueTypeMatrixExtension.CalculateMinor(CyberMath.Structures.Matrices.Matrix.IMatrix{System.Nullable{System.Double}},System.Int32,System.Int32)">
            <summary>
                Calculates minor for <paramref name="matrix"/>
            </summary>
            <param name="matrix"></param>
            <param name="i"></param>
            <param name="j"></param>
            <returns>Minor</returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1">
            <summary>
                Interface for Jugged Matrix. It implements <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1.SortRows">
            <summary>
                Sorts rows in <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> by count of elements
            </summary>
            <returns>New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> with sorted rows by count of elements</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1.SortRowsByDescending">
            <returns>New <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> with sorted rows by descending by count of elements</returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1">
            <summary>
                Describes a Jugged Matrix. Implements <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.Clone">
            <summary>
                Returns a new cloned object of initial matrix.
                <remarks>
                    Works only with primitives and [Serializable] types
                </remarks>
            </summary>
            <returns>New matrix&lt;T&gt;</returns>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.RowsCount">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.IsSquare">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.ProcessFunctionOverData(System.Action{System.Int32,System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.ElementsInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.CreateIdentityMatrix(System.Int32)">
            <summary>
                Creates new <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> identity matrix.
                <para></para>
                <example>
                    n = 3
                    <para/>
                    matrix =
                    <para/>
                    {
                    <para/>
                    {1,0,0},
                    <para/>
                    {0,1,0},
                    <para/>
                    {0,0,1}
                    <para/>
                    }
                </example>
            </summary>
            <param name="rowsAndColumnsCount">Count of rows and columns</param>
            <returns>Identity <see cref="T:CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix`1"/> matrix</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.#ctor(System.Int32,System.Int32[])">
            <summary>
                Initializes a new matrix object with count of rows = <paramref name="rowsCount"/>
                and count of columns on each row => <paramref name="elementsAtRow"/>
            </summary>
            <param name="rowsCount"></param>
            <param name="elementsAtRow"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Initializes a new matrix object with count of rows = <paramref name="rowsCount"/>
                and count of columns on each row => <paramref name="elementsAtRow"/>
            </summary>
            <param name="rowsCount"></param>
            <param name="elementsAtRow"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.SortRows">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.SortRowsByDescending">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.GetColumnsEnumerable">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.Equals(CyberMath.Structures.Matrices.Jagged_Matrix.IJuggedMatrix{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Jagged_Matrix.JuggedMatrix`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1">
            <summary>
                Interface for vanilla Matrix. Implements <see cref="T:CyberMath.Structures.Matrices.Base.IMatrixBase`1"/>
            </summary>
            <typeparam name="T">ANY</typeparam>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Matrix.IMatrix`1.ColumnsCount">
            <summary>
                Count of columns in <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.IMatrix`1.Transpose">
            <summary>
                Creates a new <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> transposed
            </summary>
            <returns>New <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> instance</returns>
        </member>
        <member name="T:CyberMath.Structures.Matrices.Matrix.Matrix`1">
            <summary>
                Implementation of <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> with Math-functional methods
            </summary>
            <typeparam name="T"/>
        </member>
        <member name="F:CyberMath.Structures.Matrices.Matrix.Matrix`1._innerMatrix">
            <summary>
                Internal matrix needed to implement the class <see cref="T:CyberMath.Structures.Matrices.Matrix.Matrix`1"/>
            </summary>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new matrix object with count of rows = <paramref name="rowsCount"/>
                and count of columns = <paramref name="columnsCount"/>
            </summary>
            <param name="rowsCount">Count of rows in matrix</param>
            <param name="columnsCount">Count of columns in matrix</param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.#ctor(`0[0:,0:])">
            <summary>
                Initializes a new matrix object with <paramref name="matrix"/>
            </summary>
            <param name="matrix">Matrix for init initial <see cref="T:CyberMath.Structures.Matrices.Matrix.Matrix`1"/></param>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.#ctor">
            <summary>
                Creates an empty matrix with 0 rows and 0 columns
            </summary>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Matrix.Matrix`1.ColumnsCount">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Matrix.Matrix`1.RowsCount">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Matrix.Matrix`1.IsSquare">
            <inheritdoc/>
        </member>
        <member name="P:CyberMath.Structures.Matrices.Matrix.Matrix`1.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.Transpose">
            <summary>
                Returns a new transposed matrix of initial one
            </summary>
            <returns><see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> matrix</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.ProcessFunctionOverData(System.Action{System.Int32,System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.Equals(CyberMath.Structures.Matrices.Matrix.IMatrix{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.ElementsInRow(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.Clone">
            <summary>
                Returns a new cloned object of initial matrix.
                <remarks>
                    Works only with primitives and [Serializable] types
                </remarks>
            </summary>
            <returns>New matrix&lt;T&gt;</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.CreateIdentityMatrix(System.Int32)">
            <summary>
                Creates new <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> identity matrix.
                <para></para>
                <example>
                    n = 3
                    <para/>
                    matrix =
                    <para/>
                    {
                    <para/>
                    {1,0,0},
                    <para/>
                    {0,1,0},
                    <para/>
                    {0,0,1}
                    <para/>
                    }
                </example>
            </summary>
            <param name="rowsAndColumnsCount">Count of rows and columns</param>
            <returns>Identity <see cref="T:CyberMath.Structures.Matrices.Matrix.IMatrix`1"/> matrix</returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.RowEnumerator(System.Int32)">
            <summary>
                Enumerates all elements in a row
            </summary>
            <param name="rowIndex">Row to enumerate</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> elements in a <see cref="T:CyberMath.Structures.Matrices.Matrix.Matrix`1"/> in <paramref name="rowIndex"/></returns>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CyberMath.Structures.Matrices.Matrix.Matrix`1.GetColumnsEnumerable">
            <inheritdoc/>
        </member>
    </members>
</doc>
